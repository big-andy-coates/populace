/*
 * Copyright (c) 2015 Andrew Coates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

buildscript {
    repositories {
        mavenCentral()
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven'

    group = "com.github.datalorax.populace"
    version = "1.1.0"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    //noinspection GroovyAssignabilityCheck
    dependencies {
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
        compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
        compile 'com.google.guava:guava:18.0'

        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
        testCompile 'org.testng:testng:6.8.+'
        testCompile 'org.mockito:mockito-all:1.10.+'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    //noinspection GroovyAssignabilityCheck
    test {
        useTestNG()

        testLogging {
            events = ["skipped", "failed"]

            displayGranularity = 3
        }
    }

    jar.dependsOn test
    jar.dependsOn javadoc

    task javaDocJar(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javaDocJar
        archives sourcesJar
    }

    if (hasRequiredProperties()) {
        signing {
            sign configurations.archives
        }

        //noinspection GroovyAssignabilityCheck
        uploadArchives {
            repositories {
                mavenDeployer {
                    uniqueVersion = true

                    // remove test dependencies from pom file
                    conf2ScopeMappings.mappings.remove(configurations.testCompile)

                    beforeDeployment { deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'Populace'
                        inceptionYear '2014'
                        packaging 'jar'
                        description 'Object graph walker and populator'
                        url 'https://github.com/datalorax/populace'

                        scm {
                            url 'git@github.com:datalorax/populace.git'
                            connection 'scm:git:git@github.com:datalorax/populace.git'
                            developerConnection 'scm:git:git@github.com:datalorax/populace.git'
                        }

                        issueManagement {
                            url 'https://github.com/datalorax/populace/issues'
                            system 'GitHub Issues'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'datalorax'
                                name 'Andrew Coates'
                                url 'https://github.com/datalorax'
                                email 'datalorax@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }

    // Todo(aC): Add release task to upload to central and create draft release on GitHub.  Maybe pickup release notes from source... or even better, pick up all issues & PRs merged to master sinse last release!
}

private boolean hasRequiredProperties() {
    // Properties optionally picked up from ~/.gradle/gradle.properties for signing and uploading to central
    project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile') &&
            project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')
}

task coverage(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn coverage
    onlyIf { System.env.'CI' }
}

defaultTasks 'clean', 'jar'
